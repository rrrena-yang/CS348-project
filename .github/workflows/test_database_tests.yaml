name: MySQL CI

on: [pull_request]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:latest
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        env:
          MYSQL_ROOT_PASSWORD: MySQL030927
          MYSQL_DATABASE: CS348_TEST
          MYSQL_CHARSET: utf8mb4
          MYSQL_COLLATION: utf8mb4_unicode_ci
        volumes:
          - my.cnf:/etc/mysql/conf.d/

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: Get MySQL container ID
      id: mysql_container
      run: echo "::set-output name=id::$(docker ps -q -f ancestor=mysql:latest)"

    - name: Wait for MySQL
      run: |
        for i in {30..0}; do
          if [ "$(docker inspect --format='{{.State.Health.Status}}' ${{steps.mysql_container.outputs.id}})" == "healthy" ]; then
            echo "MySQL is healthy"
            break
          fi
          echo 'Waiting for MySQL to be healthy...'
          sleep 1
        done

    - name: Check MySQL container logs
      run: docker logs ${{steps.mysql_container.outputs.id}}

    - name: Check my.cnf in MySQL container
      run: |
        docker exec -i ${{steps.mysql_container.outputs.id}} ls /etc/mysql/conf.d/

    - name: Copy scripts to MySQL container
      run: |
        docker cp bootstrap_test.sh ${{steps.mysql_container.outputs.id}}:/root/bootstrap_test.sh
        docker cp create_table.sql ${{steps.mysql_container.outputs.id}}:/root/create_table.sql
        docker cp bootstrap_test.sql ${{steps.mysql_container.outputs.id}}:/root/bootstrap_test.sql

    - name: Run bootstrap_test.sh inside MySQL container
      run: |
        docker exec -i ${{steps.mysql_container.outputs.id}} sh -c 'chmod +x /root/bootstrap_test.sh && /root/bootstrap_test.sh'
    
    - name: Run sample queries and check outputs
      run: |
        find sample-query -type f -name '*.sql' | while read -r sql_file; do
          base_name=$(basename "$sql_file" .sql)
          out_file="${sql_file%.sql}.out"
          output=$(docker exec -i ${{steps.mysql_container.outputs.id}} mysql -uroot -p"MySQL030927" CS348_TEST < "$sql_file")
          echo "$output" > output.txt
          if ! diff -w -q output.txt "$out_file"; then
            echo "Output mismatch for $sql_file"
            echo "===== Expected Output ($out_file) ====="
            cat "$out_file"
            echo "===== Actual Output ====="
            cat output.txt
            exit 1
          fi
        done
